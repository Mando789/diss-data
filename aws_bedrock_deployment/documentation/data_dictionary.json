{
  "metadata": {
    "title": "Multi-Agent Workflow Optimization System - Data Dictionary",
    "version": "1.0",
    "last_updated": "2024-01-01",
    "description": "Comprehensive data field descriptions for dissertation research system",
    "scope": "All data structures, APIs, and system components"
  },
  "training_data_fields": {
    "input_agent_training": {
      "description": "Training data for input processing agent",
      "fields": {
        "input": {
          "type": "object",
          "description": "Input data provided to the agent",
          "required": true,
          "fields": {
            "workflow_data": {
              "type": "string|object",
              "description": "Raw workflow information in text, structured, or image format",
              "examples": ["Process description", "Flowchart image", "XES data"]
            },
            "context": {
              "type": "string",
              "description": "Context or domain of the workflow",
              "examples": ["University travel approval", "Academic research process"]
            },
            "agent_role": {
              "type": "string",
              "description": "Target agent for this training example",
              "values": ["input", "analysis", "optimization", "output", "multi_agent"]
            }
          }
        },
        "output": {
          "type": "object",
          "description": "Expected output from the agent",
          "required": true,
          "fields": {
            "parsed_data": {
              "type": "object",
              "description": "Structured representation of input data",
              "fields": {
                "process_steps": {"type": "array", "description": "Sequential process steps"},
                "stakeholders": {"type": "array", "description": "Involved stakeholders"},
                "approval_levels": {"type": "number", "description": "Number of approval levels"},
                "cycle_time": {"type": "number", "description": "Process cycle time in days"},
                "complexity_score": {"type": "number", "description": "Process complexity (1-10)"}
              }
            },
            "extracted_characteristics": {
              "type": "array",
              "description": "Key workflow characteristics identified",
              "examples": ["high_rejection_rate", "complex_approval_chain", "manual_processing"]
            },
            "potential_bottlenecks": {
              "type": "array", 
              "description": "Identified potential bottlenecks",
              "examples": ["director_approval", "compliance_check", "budget_validation"]
            }
          }
        },
        "metadata": {
          "type": "object",
          "description": "Training example metadata",
          "fields": {
            "source": {"type": "string", "description": "Data source identifier"},
            "case_id": {"type": "string", "description": "Unique case identifier"},
            "validation_status": {"type": "string", "description": "Research validation status"}
          }
        }
      }
    },
    "analysis_agent_training": {
      "description": "Training data for analysis agent",
      "fields": {
        "input": {
          "type": "object",
          "description": "Workflow data for analysis",
          "fields": {
            "workflow_data": {"type": "string", "description": "Processed workflow description"},
            "context": {"type": "string", "description": "Organizational context"},
            "agent_role": {"type": "string", "values": ["analysis"]}
          }
        },
        "output": {
          "type": "object",
          "description": "Framework-based analysis results",
          "fields": {
            "analysis": {"type": "string", "description": "Overall analysis summary"},
            "framework_violations": {
              "type": "array",
              "description": "Identified framework principle violations",
              "item_fields": {
                "type": {"type": "string", "description": "Violation type"},
                "lean_waste": {"type": "string", "description": "Associated Lean waste type"},
                "agile_principle": {"type": "string", "description": "Violated Agile principle"},
                "severity": {"type": "string", "values": ["low", "medium", "high", "critical"]},
                "evidence": {"type": "string", "description": "Supporting evidence"}
              }
            },
            "inefficiency_score": {"type": "number", "description": "Overall inefficiency score (1-10)"},
            "optimization_potential": {"type": "string", "description": "Estimated improvement potential"}
          }
        }
      }
    },
    "optimization_agent_training": {
      "description": "Training data for optimization agent",
      "fields": {
        "input": {
          "type": "object",
          "fields": {
            "inefficiencies": {"type": "array", "description": "Identified inefficiencies"},
            "organizational_context": {"type": "string", "description": "Organization-specific context"},
            "agent_role": {"type": "string", "values": ["optimization"]}
          }
        },
        "output": {
          "type": "object",
          "fields": {
            "recommendations": {
              "type": "array",
              "description": "Specific optimization recommendations",
              "item_fields": {
                "title": {"type": "string", "description": "Recommendation title"},
                "implementation_steps": {"type": "array", "description": "Step-by-step implementation"},
                "timeline": {"type": "string", "description": "Implementation timeline"},
                "expected_roi": {"type": "string", "description": "Expected return on investment"},
                "cost_savings": {"type": "string", "description": "Quantified cost savings"},
                "risk_factors": {"type": "array", "description": "Implementation risks"},
                "success_metrics": {"type": "array", "description": "Success measurement criteria"},
                "framework_alignment": {"type": "object", "description": "Framework principle alignment"},
                "resource_requirements": {"type": "string", "description": "Required resources"}
              }
            }
          }
        }
      }
    },
    "output_agent_training": {
      "description": "Training data for output formatting agent",
      "fields": {
        "input": {
          "type": "object",
          "fields": {
            "analysis_results": {"type": "object", "description": "Analysis results to format"},
            "recommendations": {"type": "array", "description": "Optimization recommendations"},
            "format_requested": {"type": "string", "description": "Desired output format"},
            "agent_role": {"type": "string", "values": ["output"]}
          }
        },
        "output": {
          "type": "object",
          "description": "Formatted output in requested style",
          "variable_structure": "Depends on format_requested"
        }
      }
    }
  },
  "framework_knowledge_fields": {
    "agile_framework": {
      "description": "Agile methodology knowledge structure",
      "fields": {
        "core_values": {
          "type": "array",
          "description": "Four core Agile values",
          "item_fields": {
            "value": {"type": "string", "description": "Agile value statement"},
            "workflow_application": {"type": "string", "description": "Application to workflow optimization"},
            "operating_model_impact": {"type": "string", "description": "Impact on organizational design"},
            "inefficiency_detection": {"type": "string", "description": "How to detect violations"},
            "optimization_guidance": {"type": "string", "description": "Optimization recommendations"}
          }
        },
        "twelve_principles": {
          "type": "array",
          "description": "Twelve Agile principles",
          "item_fields": {
            "principle": {"type": "string", "description": "Principle statement"},
            "workflow_application": {"type": "string", "description": "Workflow application"},
            "operating_model_application": {"type": "string", "description": "Operating model application"},
            "measurement": {"type": "string", "description": "Success metrics"},
            "violation_indicators": {"type": "array", "description": "Signs of principle violation"},
            "optimization_strategies": {"type": "array", "description": "Improvement strategies"}
          }
        },
        "agile_detection_rules": {
          "type": "array",
          "description": "Rules for detecting Agile principle violations",
          "item_fields": {
            "violation": {"type": "string", "description": "Violation type"},
            "description": {"type": "string", "description": "Violation description"},
            "detection_rule": {"type": "string", "description": "Automated detection logic"},
            "threshold": {"type": "string", "description": "Threshold values"},
            "framework_basis": {"type": "string", "description": "Supporting framework principle"},
            "optimization": {"type": "string", "description": "Recommended optimization"},
            "expected_improvement": {"type": "string", "description": "Expected improvement range"}
          }
        }
      }
    },
    "lean_framework": {
      "description": "Lean methodology knowledge structure", 
      "fields": {
        "seven_wastes": {
          "type": "array",
          "description": "Seven types of Lean waste",
          "item_fields": {
            "waste": {"type": "string", "description": "Waste type name"},
            "definition": {"type": "string", "description": "Waste definition"},
            "workflow_application": {"type": "string", "description": "Application to workflows"},
            "travel_example": {"type": "string", "description": "Travel process example"},
            "operating_model_impact": {"type": "string", "description": "Organizational impact"},
            "detection_methods": {"type": "array", "description": "Detection approaches"},
            "optimization_strategies": {"type": "array", "description": "Elimination strategies"},
            "detection_rules": {
              "type": "object",
              "description": "Automated detection rules",
              "fields": {
                "threshold": {"type": "string", "description": "Detection threshold"},
                "evidence": {"type": "string", "description": "Required evidence"},
                "root_causes": {"type": "array", "description": "Common root causes"},
                "expected_improvement": {"type": "string", "description": "Improvement potential"}
              }
            }
          }
        },
        "five_lean_principles": {
          "type": "array",
          "description": "Five core Lean principles",
          "item_fields": {
            "principle": {"type": "string", "description": "Principle name"},
            "description": {"type": "string", "description": "Principle description"},
            "workflow_application": {"type": "string", "description": "Workflow application"},
            "operating_model_application": {"type": "string", "description": "Operating model application"},
            "implementation_steps": {"type": "array", "description": "Implementation approach"},
            "success_metrics": {"type": "array", "description": "Success measures"},
            "ai_guidance": {"type": "string", "description": "AI agent guidance"}
          }
        }
      }
    },
    "operating_model_framework": {
      "description": "Operating model design knowledge",
      "fields": {
        "mckinsey_organize_to_value": {
          "type": "object",
          "description": "McKinsey framework elements",
          "fields": {
            "elements": {
              "type": "array",
              "description": "Five key elements",
              "item_fields": {
                "element": {"type": "string", "description": "Element name"},
                "description": {"type": "string", "description": "Element description"},
                "workflow_application": {"type": "string", "description": "Workflow application"},
                "implementation": {"type": "string", "description": "Implementation approach"},
                "metrics": {"type": "array", "description": "Success metrics"},
                "optimization_focus": {"type": "string", "description": "Optimization focus area"},
                "common_issues": {"type": "array", "description": "Common problems"}
              }
            }
          }
        },
        "operating_model_violations": {
          "type": "array",
          "description": "Operating model violation patterns",
          "item_fields": {
            "violation": {"type": "string", "description": "Violation type"},
            "description": {"type": "string", "description": "Violation description"},
            "detection_rule": {"type": "string", "description": "Detection logic"},
            "threshold": {"type": "string", "description": "Detection threshold"},
            "optimization": {"type": "string", "description": "Recommended fix"},
            "framework_basis": {"type": "string", "description": "Framework element"},
            "expected_improvement": {"type": "string", "description": "Improvement potential"},
            "severity_scoring": {"type": "object", "description": "Severity classification"}
          }
        }
      }
    }
  },
  "validation_data_fields": {
    "validation_cases": {
      "description": "Test cases for system validation",
      "fields": {
        "case_id": {"type": "string", "description": "Unique test case identifier"},
        "test_name": {"type": "string", "description": "Descriptive test name"},
        "input_data": {"type": "object", "description": "Test input data"},
        "expected_outputs": {
          "type": "object",
          "description": "Expected results from each agent",
          "fields": {
            "input_agent": {"type": "object", "description": "Expected input agent output"},
            "analysis_agent": {"type": "object", "description": "Expected analysis output"},
            "optimization_agent": {"type": "object", "description": "Expected optimization output"},
            "output_agent": {"type": "object", "description": "Expected formatted output"}
          }
        },
        "validation_criteria": {
          "type": "object",
          "description": "Success criteria for validation",
          "fields": {
            "accuracy_thresholds": {"type": "object", "description": "Required accuracy levels"},
            "quality_requirements": {"type": "object", "description": "Quality standards"}
          }
        }
      }
    },
    "benchmark_examples": {
      "description": "Performance benchmark data",
      "fields": {
        "benchmark_id": {"type": "string", "description": "Benchmark identifier"},
        "scenario_name": {"type": "string", "description": "Benchmark scenario name"},
        "description": {"type": "string", "description": "Scenario description"},
        "input_characteristics": {"type": "object", "description": "Input parameters"},
        "expected_analysis": {"type": "object", "description": "Expected analysis results"},
        "expected_recommendations": {"type": "array", "description": "Expected recommendations"},
        "benchmark_purpose": {"type": "string", "description": "Validation purpose"}
      }
    }
  },
  "aws_configuration_fields": {
    "lambda_config": {
      "description": "Lambda function configuration",
      "fields": {
        "function_name": {"type": "string", "description": "Lambda function name"},
        "description": {"type": "string", "description": "Function description"},
        "runtime": {"type": "string", "description": "Runtime environment"},
        "memory_size": {"type": "number", "description": "Memory allocation in MB"},
        "timeout": {"type": "number", "description": "Timeout in seconds"},
        "environment_variables": {"type": "object", "description": "Environment configuration"},
        "iam_policies": {"type": "array", "description": "Required IAM permissions"},
        "layer_dependencies": {"type": "array", "description": "Lambda layer dependencies"},
        "handler": {"type": "string", "description": "Function entry point"},
        "concurrency_config": {"type": "object", "description": "Concurrency settings"}
      }
    },
    "s3_structure": {
      "description": "S3 bucket organization",
      "fields": {
        "directory_path": {"type": "string", "description": "S3 directory path"},
        "description": {"type": "string", "description": "Directory purpose"},
        "files": {"type": "array", "description": "Expected files"},
        "size_estimate": {"type": "string", "description": "Estimated storage size"},
        "access_pattern": {"type": "string", "description": "Read/write pattern"},
        "retention": {"type": "string", "description": "Data retention policy"}
      }
    },
    "dynamodb_schema": {
      "description": "DynamoDB table structure",
      "fields": {
        "table_name": {"type": "string", "description": "Table name"},
        "description": {"type": "string", "description": "Table purpose"},
        "partition_key": {"type": "object", "description": "Primary partition key"},
        "sort_key": {"type": "object", "description": "Primary sort key"},
        "attributes": {"type": "array", "description": "Table attributes"},
        "global_secondary_indexes": {"type": "array", "description": "GSI definitions"},
        "billing_mode": {"type": "string", "description": "Billing configuration"},
        "stream_specification": {"type": "object", "description": "DynamoDB streams config"}
      }
    },
    "api_gateway": {
      "description": "API Gateway configuration",
      "fields": {
        "path": {"type": "string", "description": "API endpoint path"},
        "method": {"type": "string", "description": "HTTP method"},
        "description": {"type": "string", "description": "Endpoint description"},
        "integration": {"type": "object", "description": "Backend integration"},
        "request_parameters": {"type": "object", "description": "Request parameters"},
        "request_body": {"type": "object", "description": "Request body schema"},
        "responses": {"type": "object", "description": "Response definitions"},
        "authorization": {"type": "object", "description": "Authorization config"}
      }
    }
  },
  "system_state_fields": {
    "processing_session": {
      "description": "Workflow processing session state",
      "fields": {
        "session_id": {"type": "string", "description": "Unique session identifier"},
        "timestamp": {"type": "number", "description": "Unix timestamp"},
        "workflow_id": {"type": "string", "description": "Workflow identifier"},
        "processing_stage": {
          "type": "string",
          "values": ["input", "analysis", "optimization", "output", "complete"],
          "description": "Current processing stage"
        },
        "agent_status": {
          "type": "object",
          "description": "Status of each agent",
          "fields": {
            "input_agent": {"type": "string", "values": ["pending", "running", "completed", "failed"]},
            "analysis_agent": {"type": "string", "values": ["pending", "running", "completed", "failed"]},
            "optimization_agent": {"type": "string", "values": ["pending", "running", "completed", "failed"]},
            "output_agent": {"type": "string", "values": ["pending", "running", "completed", "failed"]}
          }
        },
        "processing_results": {"type": "object", "description": "Results from each agent"},
        "quality_metrics": {
          "type": "object",
          "description": "Quality assessment scores",
          "fields": {
            "overall_quality": {"type": "number", "description": "Overall quality score (0-1)"},
            "framework_alignment": {"type": "number", "description": "Framework alignment score"},
            "recommendation_quality": {"type": "number", "description": "Recommendation quality score"},
            "implementation_feasibility": {"type": "number", "description": "Implementation feasibility score"}
          }
        },
        "error_log": {"type": "array", "description": "Processing errors encountered"},
        "ttl": {"type": "number", "description": "Time to live for cleanup"}
      }
    },
    "performance_metrics": {
      "description": "Agent performance tracking",
      "fields": {
        "agent_name": {"type": "string", "description": "Agent identifier"},
        "metric_timestamp": {"type": "number", "description": "Metric timestamp"},
        "session_id": {"type": "string", "description": "Associated session"},
        "execution_time_ms": {"type": "number", "description": "Execution time in milliseconds"},
        "quality_score": {"type": "number", "description": "Quality score (0-1)"},
        "accuracy_metrics": {
          "type": "object",
          "description": "Detailed accuracy measurements",
          "fields": {
            "detection_accuracy": {"type": "number", "description": "Inefficiency detection accuracy"},
            "classification_accuracy": {"type": "number", "description": "Framework classification accuracy"},
            "severity_accuracy": {"type": "number", "description": "Severity assessment accuracy"},
            "potential_estimation_accuracy": {"type": "number", "description": "Optimization potential accuracy"}
          }
        },
        "framework_alignment_score": {"type": "number", "description": "Framework principle alignment"},
        "error_count": {"type": "number", "description": "Number of errors"},
        "retry_count": {"type": "number", "description": "Number of retries"},
        "memory_usage_mb": {"type": "number", "description": "Memory usage"},
        "bedrock_tokens_used": {"type": "number", "description": "Bedrock token consumption"}
      }
    }
  },
  "data_quality_standards": {
    "completeness": {
      "description": "Data completeness requirements",
      "minimum_required_fields": "95%",
      "missing_data_handling": "Validation errors for critical fields",
      "optional_field_guidelines": "Clear marking of optional vs required"
    },
    "accuracy": {
      "description": "Data accuracy standards",
      "validation_rules": "JSON schema validation for all structured data",
      "format_requirements": "Consistent date/time formats, standardized enums",
      "range_validation": "Numeric ranges validated against realistic bounds"
    },
    "consistency": {
      "description": "Data consistency requirements",
      "cross_field_validation": "Related fields must be logically consistent",
      "referential_integrity": "Foreign key relationships maintained",
      "format_standardization": "Consistent naming conventions and data types"
    },
    "timeliness": {
      "description": "Data freshness requirements",
      "processing_sla": "Results available within specified timeframes",
      "staleness_detection": "Automatic detection of outdated information",
      "refresh_policies": "Regular updates for framework knowledge and benchmarks"
    }
  },
  "research_compliance": {
    "citation_requirements": {
      "framework_sources": "All framework applications must cite original academic sources",
      "research_validation": "BPI Challenge findings must reference published papers",
      "methodology_basis": "Multi-framework approach citations required"
    },
    "validation_standards": {
      "empirical_validation": "All thresholds based on published research findings",
      "benchmark_alignment": "Performance targets aligned with academic literature",
      "reproducibility": "All results must be reproducible with provided data"
    },
    "academic_rigor": {
      "framework_application": "Proper application of academic frameworks",
      "methodology_consistency": "Consistent application of research methods",
      "statistical_validity": "Appropriate statistical methods for validation"
    }
  }
}